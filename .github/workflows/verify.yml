name: Verify

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

env:
  CI: true
  FORCE_COLOR: true
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1
  IMG_NAME: ghcr.io/${{ github.repository }}
  IMG_NAME_TAG: ghcr.io/${{ github.repository }}:pr-${{ github.event.pull_request.number }}

concurrency:
  cancel-in-progress: true
  group: "cockpit-${{ github.ref }}"

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@v3.0.0
      - uses: dotenv-linter/action-dotenv-linter@v2
        with:
          fail_on_error: true
          dotenv_linter_flags: --skip UnorderedKey
          github_token: ${{ secrets.GITHUB_TOKEN }}

  setup:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-buildx-action@v2.2.1
    - uses: docker/metadata-action@v4.1.1
      id: meta
      with:
        images: ${{ env.IMG_NAME }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flavor: latest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}

  validate:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-buildx-action@v2.2.1
    - uses: docker/build-push-action@v3.2.0
      with:
        push: false
        load: true
        tags: ${{ needs.setup.outputs.tags }}
        labels: ${{ needs.setup.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.IMG_NAME_TAG }}
        format: sarif
        exit-code: 1
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,HIGH,CRITICAL'
        output: trivy-results.sarif
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
    - uses: docker://gcr.io/gcp-runtimes/container-structure-test:latest
      with:
        args: test -v debug --force --output junit --test-report cst_junit_report.xml --config spec/config-cst.yml --image ${{ env.IMG_NAME_TAG }}
    - if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: cst_junit_report.xml
    - uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: cst_junit_report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs:
      - setup
      - validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: preview
      url: https://${{ env.IMG_NAME_TAG }}
    steps:
    - uses: actions/checkout@v3
    - uses: sigstore/cosign-installer@v2.8.1
    - uses: docker/setup-buildx-action@v2.2.1
    - uses: docker/login-action@v2.1.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/build-push-action@v3.2.0
      id: build-and-push
      with:
        push: true
        tags: ${{ needs.setup.outputs.tags }}
        labels: ${{ needs.setup.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.
    # If you would like to publish transparency data even for private images,
    # pass --force to cosign below. https://github.com/sigstore/cosign
    - name: Sign the resulting Docker image digest
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${{ needs.setup.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
